#!/bin/bash (only for syntax highlighting)
#
# functions for modular use by scripts
#

check_args() {
    if [ $# -lt 1 ]; then
        echo "error: config file missing"
        echo "usage: $0 <config-file>"
        exit 1
    fi
    if [ ! -f "$1" ]; then
        echo "error: file not found: $1"
        exit 1
    fi
    # import settings
    . "$1"
}

check_exit() {
    # $1: exit code, $?
    if [ $1 -ne 0 ]; then
        echo "oops, something went wrong, exiting."
        exit 1
    else
        echo -e "done.\n"
    fi
}

copy_files() {
    # copy files from server using rsync
    # rsync opts
    # -r recursive
    # -l copy symlinks as symlinks
    # -p preserve permissions
    # --chown set user/group
    # --owner --group needed for --chown to work
    #         - https://lists.samba.org/archive/rsync/2013-October/028753.html
    #
    # remote path includes always a trailing slash,
    # by `parameter substitution`, e.g.: "${var%/}"/
    # stripping if present and readding to avoid doubles
    echo "copying files..."
    sudo \
        rsync -rlp --owner --group \
            --chown="$WEBSITE_LOCAL_USER:$WEBSITE_LOCAL_GROUP" \
            "$ME"@"$WEBSITE_REMOTE_SERVER":"${WEBSITE_ORIG_PATH%/}"/ \
            "$WEBSITE_COPY_PATH"
    check_exit $?
}

copy_files_local() {
    # copy files on local server using rsync
    # rsync opts
    # -a archive mode; equals -rlptgoD (no -H,-A,-X)
    # -u skip files that are newer on the receiver
    #
    # remote path includes always a trailing slash,
    # by `parameter substitution`, e.g.: "${var%/}"/
    # stripping if present and readding to avoid doubles
    echo "copying files..."
    sudo \
        rsync -au \
            "${WEBSITE_ORIG_PATH%/}"/ \
            "$WEBSITE_COPY_PATH"
    check_exit $?
}

override_files() {
    # copying files from override directory
    echo "copying files from override directory..."
    sudo -u "$WEBSITE_LOCAL_USER" \
        cp -dpr "${OVERRIDE_PATH%/}"/. "$WEBSITE_COPY_PATH"
    check_exit $?
}

create_local_db() {
    # create new db on local instance
    #
    # mysql > 5.7.6
    #    CREATE USER IF NOT EXISTS ${DB_LOCAL_USER} IDENTIFIED BY ${DB_LOCAL_PASS};
    #    GRANT ALL PRIVILEGES ON ${DB_LOCAL_NAME}.* TO ${DB_LOCAL_USER}@'localhost'
    # --> doesn't work
    #
    # for mysql below this use something like:
    # GRANT ALL ON `database`.* TO 'user'@'localhost' IDENTIFIED BY 'password';
    # ==> works
    #
    # - http://stackoverflow.com/questions/13357760/mysql-create-user-if-not-exists#
    echo "creating local database..."
    mysql <<HERE
        CREATE DATABASE IF NOT EXISTS ${DB_LOCAL_NAME};
        GRANT ALL ON ${DB_LOCAL_NAME}.* TO ${DB_LOCAL_USER}@'localhost' IDENTIFIED BY '${DB_LOCAL_PASS}';
        FLUSH PRIVILEGES;
HERE
    check_exit $?
}

create_remote_db() {
    # create new db on remote instance
    #
    # mysql > 5.7.6
    #    CREATE USER IF NOT EXISTS ${DB_LOCAL_USER} IDENTIFIED BY ${DB_LOCAL_PASS};
    #    GRANT ALL PRIVILEGES ON ${DB_LOCAL_NAME}.* TO ${DB_LOCAL_USER}@'localhost'
    # --> doesn't work
    #
    # for mysql below this use something like:
    # GRANT ALL ON `database`.* TO 'user'@'localhost' IDENTIFIED BY 'password';
    # ==> works
    #
    # - http://stackoverflow.com/questions/13357760/mysql-create-user-if-not-exists#
    echo "creating remote database..."
    mysql -h "$DB_SERVER" -u "$DB_USER" -p <<HERE
        CREATE DATABASE IF NOT EXISTS ${DB_COPY_NAME};
        GRANT ALL ON ${DB_COPY_NAME}.* TO ${DB_COPY_USER}@'${DB_COPY_ACCESS_HOST}' IDENTIFIED BY '${DB_COPY_PASS}';
        FLUSH PRIVILEGES;
HERE
    check_exit $?
}

copy_database() {
    # copy database from remote to local
    #
    # ref: http://tltech.com/info/mysql-via-ssh/
    # mysql destdb < <(ssh sourceserver.example.com "mysqldump sourcedb")
    # sudo ??
    # or ssh sourceserver.example.com "mysqldump sourcedb" | mysql destdb
    #
    # tested: ssh r.. "mysqldump joomla_....| gzip" > joomla_.....dump.gz
    # works!
    echo "copying database from remote..."
    ssh "$DB_REMOTE_SERVER" "mysqldump $DB_REMOTE_NAME | gzip -c" \
        | gzip -d | mysql "$DB_LOCAL_NAME"
    check_exit $?
}

copy_database_remote() {
    # copy database on remote server
    #
    echo "copying database on remote server..."
    echo "dumping..."
    mysqldump -h "$DB_SERVER" -u "$DB_USER" -p "$DB_ORIG_NAME" > db-tmp.sql
    # --> use pipe here ?
    echo "inserting..."
    mysql -h "$DB_SERVER" -u "$DB_USER" -p "$DB_COPY_NAME" < db-tmp.sql
    #rm db-tmp.sql
#    ssh "$DB_SERVER" "mysqldump $DB_ORIG_NAME | mysql $DB_COPY_NAME"
    check_exit $?
}

edit_joomla_config() {
    # auto-magically edit joomla config
    # e.g. using sed:
    # sed "s/\$user = '[^']*'/\$user = \'$loon\'/" configuration.php
    # or:
    # sed "/\$user = /s/'[^']*'/'$loon'/" configuration.php
    echo "auto-edit joomla config..."
    sudo sed -i_$(date +%Y-%m-%d.production_orig) "/\$host = /s/'[^']*'/'localhost'/" "${WEBSITE_COPY_PATH%/}"/configuration.php
    sudo sed -i "/\$user = /s/'[^']*'/'$DB_COPY_USER'/" "${WEBSITE_COPY_PATH%/}"/configuration.php
    sudo sed -i "/\$password = /s/'[^']*'/'$DB_COPY_PASS'/" "${WEBSITE_COPY_PATH%/}"/configuration.php
    sudo sed -i "/\$db = /s/'[^']*'/'$DB_COPY_NAME'/" "${WEBSITE_COPY_PATH%/}"/configuration.php
    #LOGPATH="$WEBSITE_COPY_PATH/logs"
    sudo sed -i \
        "s!\$log_path = '[^']*'!\$log_path = '${WEBSITE_COPY_PATH%/}/logs'!" \
        "${WEBSITE_COPY_PATH%/}"/configuration.php
    sudo sed -i \
        "s!\$tmp_path = '[^']*'!\$tmp_path = '${WEBSITE_COPY_PATH%/}/tmp'!" \
        "${WEBSITE_COPY_PATH%/}"/configuration.php
#    sudo sed -i "/\$log_path = /s/'[^']*'/'$LOGPATH'/" "${WEBSITE_COPY_PATH%/}"/configuration.php
#    TMPPATH="${WEBSITE_COPY_PATH%/}/tmp"
#    sudo sed -i "/\$tmp_path = /s/'[^']*'/'$TMPPATH'/" "${WEBSITE_COPY_PATH%/}"/configuration.php

}
